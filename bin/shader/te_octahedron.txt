#version 400

/// 
// Tess Evaluation shader for the asteroid surface, using height map for reference
// By Jagholin, 2014
// github.com/Jagholin
///

layout(triangles) in;

in PerVertexTess {
    vec3 position;
    vec3 offset;
    float scale;
    float uvGenMode;
    vec2 explicitTexCoord;
    float texNumber;
} inVertex[];

out GeometryOut {
	vec3 vNormal;
    vec2 vTexCoord;
    vec3 vPos;
    float texNumber;
};

uniform mat4 osg_ModelViewProjectionMatrix;
uniform mat4 osg_ModelMatrix;
uniform mat4 planetRotation;
uniform sampler2DArray array512Tex;

const float PI = 3.14159f;
const float heightMapEffect = 0.3f;

void main()
{
    vec3 point = 
		gl_TessCoord.x * inVertex[0].position + 
		gl_TessCoord.y * inVertex[1].position +
        gl_TessCoord.z * inVertex[2].position;
		
    point = normalize(point);

    // Transform point coordinates into latitude/longitude
	
    float lat = asin(clamp(point.y, -0.999f, 0.999f));
    float lon = atan(- point.z, point.x);
    if (inVertex[0].uvGenMode > 0.5 && lon > 0) lon -= 2*PI;

    // transform to u/v spherically mapped texture coordinates.
	
    float u = (lon + PI) / (2*PI);
    float v = lat / (PI * 0.5); // v still in [-1, 1]
    v = (v + 1.0) * 0.5; // map v to [0, 1]

    vTexCoord = vec2(u, v);
    texNumber = inVertex[0].texNumber;

    if (gl_TessCoord.x > 0.9999 && inVertex[0].explicitTexCoord.x > -0.5)
        vTexCoord = inVertex[0].explicitTexCoord;
    else if (gl_TessCoord.y > 0.9999 && inVertex[1].explicitTexCoord.x > -0.5)
        vTexCoord = inVertex[1].explicitTexCoord;
    else if (gl_TessCoord.z > 0.9999 && inVertex[2].explicitTexCoord.x > -0.5)
        vTexCoord = inVertex[2].explicitTexCoord;

    // Read height at (u, v) from the texture array
    vec4 scaleFromTex = texture(array512Tex, vec3(u, v, texNumber));
    float addScale = scaleFromTex.a;
    addScale = (addScale - 0.5) * 0.5 + 1.0;

    point = point * inVertex[0].scale * ((scaleFromTex.a - 0.5) * heightMapEffect + 1) + inVertex[0].offset;
	vNormal = vec3(1,0,0);
    vPos = point;
    //gl_Position = osg_ModelViewProjectionMatrix * vec4(point, 1);
}
