#version 400

layout(vertices = 3) out;
in PerVertex {
    vec3 position;
    vec3 offset;
    float scale;
    float uvGenMode;
    vec2 explicitTexCoord;
    float texNumber;
} inVertex[];

out PerVertexTess {
    vec3 position;
    vec3 offset;
    float scale;
    float uvGenMode;
    vec2 explicitTexCoord;
    float texNumber;
} outVertex[];

uniform mat4 osg_ModelViewProjectionMatrix;
uniform mat4 osg_ModelViewMatrix;
uniform mat4 osg_ProjectionMatrix;
uniform vec2 viewportSize;

void main()
{
    outVertex[gl_InvocationID].position = inVertex[gl_InvocationID].position;
    outVertex[gl_InvocationID].offset = inVertex[gl_InvocationID].offset;
    outVertex[gl_InvocationID].scale = inVertex[gl_InvocationID].scale;
    outVertex[gl_InvocationID].uvGenMode = inVertex[gl_InvocationID].uvGenMode;
    outVertex[gl_InvocationID].explicitTexCoord = inVertex[gl_InvocationID].explicitTexCoord;
    outVertex[gl_InvocationID].texNumber = inVertex[gl_InvocationID].texNumber;

    vec4 eyeOffset = osg_ModelViewMatrix * vec4(inVertex[0].offset, 1.0);
    float eyeSpaceDistanceInv = eyeOffset.w / length(eyeOffset.xyz);
    float tessLevel = clamp(30.0 * eyeSpaceDistanceInv * inVertex[0].scale, 0, 50);

    eyeOffset = osg_ProjectionMatrix * eyeOffset;
	
    if (gl_InvocationID == 0)
    {
        // perform a sort of frustum culling
        //if (eyeOffset.)
        gl_TessLevelInner[0] = tessLevel;
        gl_TessLevelOuter[0] = tessLevel;
        gl_TessLevelOuter[1] = tessLevel;
        gl_TessLevelOuter[2] = tessLevel;

        //gl_TessLevelInner[0] = clamp(max(l1, max(l2, l3)) * 0.1f, 1, 50);
        //gl_TessLevelInner[1] = 5;
        //gl_TessLevelOuter[2] = clamp(l1 * 0.1f, 1, 50);
        //gl_TessLevelOuter[0] = clamp(l2 * 0.1f, 1, 50);
        //gl_TessLevelOuter[1] = clamp(l3 * 0.1f, 1, 50);
        //gl_TessLevelOuter[3] = 5;
    }
}
